function [Abest, Bbest, Cbest, Cbestcontrol, Abestsliced, Bbestsliced, reg_best, err_best, Avect, Bvect] = ...
    nonlinear_calibrate_frankenstein_model(I_train, I_train_sliced, I_control_sliced, I_genes_inx, ...
    alpha, beta, maxIterCnt, eps)

alpha_Cs = [-Inf 10];%[0 10.^[-5:20]];
control_errors = zeros(size(alpha_Cs));
err_eps = 1e-3;
err_best = Inf;

for i=1:2
    fprintf('reg=%e: ', 10^alpha_Cs(i));
    
    fprintf('Factorizing I...');
    [A, B, C, Avect, Bvect, A_sliced, B_sliced] = nonlinear_calibrate_model_short(I_train, ...
        I_train_sliced, I_genes_inx, ...
        @(I) nonlinear_alpha_beta_LO_reg(I, alpha, beta, maxIterCnt, eps, 10^alpha_Cs(i), 1));
    fprintf(' Done\n');
    
    fprintf('Factorizing I_test with fixed A...');
    [C_control, control_errors(2)] = nonlinear_find_concentrations_witherror(I_control_sliced, A_sliced, B_sliced, ...
        @(I_arg, A_arg, B_arg) nonlinear_alpha_beta_LO_reg_fixedAB(I_arg, A_arg, B_arg, alpha, beta, maxIterCnt, eps, 10^alpha_Cs(i), 1));
    fprintf(' Done\n');
    fprintf('1e%d: %f; %f\t%f\t%f\n', alpha_Cs(i), err_best, max(Abestsliced{1}), max(Bbestsliced{1}), max(Cbest(1,:)));
    if ((err_best-control_errors(i))/control_errors(i)>err_eps)
        Abest = A;
        Bbest = B;
        Cbest = C;
        Abestsliced = A_sliced;
        Bbestsliced = B_sliced;
        Cbestcontrol = C_control;
        reg_best = 10^alpha_Cs(i);
        err_best = control_errors(i);
        %fprintf('1e%d: %f; %f\t%f\t%f\n', alpha_Cs(i), err_best, max(A_sliced{2}), max(B_sliced{2}), max(C(2,:)));
        fprintf('1e%d: %f; %f\t%f\t%f\n', alpha_Cs(i), err_best, max(A_sliced{1}), max(B_sliced{1}), max(C(1,:)));
    end
end

b = alpha_Cs(2);
bl = -50;
br = 50;
fb = control_errors(2);
goon = true;
rphi = 2-(1+sqrt(5))/2;

while goon
    if (br - b > b - bl)
        x = b + floor(rphi * (br-b));
    else
        x = b - ceil(rphi * (b - bl));
    end
    
    if x==b
        goon = false;
    else
        alpha_Cs = [alpha_Cs; x];
        
        fprintf('reg=%e: ', 10^x);
        
        fprintf('Factorizing I...');
        [A, B, C, Avect, Bvect, A_sliced, B_sliced] = nonlinear_calibrate_model_short(I_train, ...
            I_train_sliced, I_genes_inx, ...
            @(I) nonlinear_alpha_beta_LO_reg(I, alpha, beta, maxIterCnt, eps, 10^x, 1));
        fprintf(' Done\n'); 
        
        fprintf('Factorizing I_test with fixed A...');
        [C_control, control_errors(end+1)] = nonlinear_find_concentrations_witherror(I_control_sliced, A_sliced, B_sliced, ...
            @(I_arg, A_arg, B_arg) nonlinear_alpha_beta_LO_reg_fixedAB(I_arg, A_arg, B_arg, alpha, beta, maxIterCnt, eps, 10^alpha_Cs(i), 1));
        fprintf(' Done\n');    
        
        if ((err_best-control_errors(end))/control_errors(end)>err_eps)||...
                (err_best-control_errors(end)>0 && reg_best>=10^x)
            Abest = A;
            Bbest = B;
            Cbest = C;
            Abestsliced = A_sliced;
            Bbestsliced = B_sliced;
            Cbestcontrol = C_control;
            reg_best = 10^x;
            err_best = control_errors(end);
            %fprintf('1e%d: %f; %f\t%f\t%f\n', alpha_Cs(i), err_best, max(A_sliced{2}), max(B_sliced{2}), max(C(2,:)));
            fprintf('1e%d: %f; %f\t%f\t%f\n', x, err_best, max(A_sliced{1}), max(B_sliced{1}), max(C(1,:)));
        end 
        if control_errors(end)<fb
            if (br - b > b - bl)
                bl = b;
                b = x;
                fb = control_errors(end);
            else
                br = b;
                b = x;
                fb = control_errors(end);                
            end
        else
            
        end
    end
end

  


double phi = (1 + Math.sqrt(5)) / 2;
double resphi = 2 - phi;
 
// a and c are the current bounds; the minimum is between them.
// b is a center point
// f(x) is some mathematical function elsewhere defined
// a corresponds to x1; b corresponds to x2; c corresponds to x3
// x corresponds to x4
 
public double goldenSectionSearch(double a, double b, double c, double tau) {
    double x;
    if (c - b > b - a)
      x = b + resphi * (c - b);
    else
      x = b - resphi * (b - a);
    if (Math.abs(c - a) < tau * (Math.abs(b) + Math.abs(x))) 
      return (c + a) / 2; 
    if (f(x) < f(b)) {
      if (c - b > b - a) return goldenSectionSearch(b, x, c);
      else return goldenSectionSearch(a, x, b, tau);
    }
    else {
      if (c - b > b - a) return goldenSectionSearch(a, b, x);
      else return goldenSectionSearch(x, b, c);
    }
  }



while goon
    fprintf('reg=%e: ', 10^alpha_Cs(i));
    
    fprintf('Factorizing I...');
    %     [A, B, C, ~, ~, A_sliced, B_sliced] = nonlinear_calibrate_model_short(I_train, ...
    %         I_train_sliced, I_genes_inx, ...
    %         @(I) nonlinear_alpha_beta_linesearch(I, alpha, beta, maxIterCnt, eps, 0, 0, 10^alpha_Cs(i), 1));
    [A, B, C, Avect, Bvect, A_sliced, B_sliced] = nonlinear_calibrate_model_short(I_train, ...
        I_train_sliced, I_genes_inx, ...
        @(I) nonlinear_alpha_beta_LO_reg(I, alpha, beta, maxIterCnt, eps, 10^alpha_Cs(i), 1));
    fprintf(' Done\n');
    
    fprintf('Factorizing I_test with fixed A...');
    [C_control, control_errors(i)] = nonlinear_find_concentrations_witherror(I_control_sliced, A_sliced, B_sliced, ...
        @(I_arg, A_arg, B_arg) nonlinear_alpha_beta_LO_reg_fixedAB(I_arg, A_arg, B_arg, alpha, beta, maxIterCnt, eps, 10^alpha_Cs(i), 1));
    %     C_control = nonlinear_find_concentrations(I_control_sliced, A_sliced, B_sliced, ...
    %         @(I_arg, A_arg, B_arg) nonlinear_alpha_beta_fixedAB(I_arg, A_arg, B_arg, alpha, beta, maxIterCnt, eps, 0, 1));%
    fprintf(' Done\n');
    
    
    %nln_plot_probeset(inten_train_sliced{2},A_sliced{2},B_sliced{2},C(2,:),0)
    %suplabel(['C train, alpha_C=' num2str(10^alpha_Cs(i))], 't');
    
    %nln_plot_probeset(inten_control_sliced{2},A_sliced{2},B_sliced{2},C_control(2,:),0)
    %suplabel(['C control, alpha_C=' num2str(10^alpha_Cs(i))], 't');
    %
    %     R = I_control(:,1:end-2) - langmuir_func(A, B, C_control);
    %     switch errors_type
    %         case 1
    %             control_errors(i) = sum(sum(R.^2)) /  control_size;
    %         case 2
    %             control_errors(i)  = sum(sum(abs(R))) / control_size;
    %         case 3
    %             control_errors(i) = sum(sum(loss_asymmetric(R) .* I_control(:,1:end-2) )) / control_size;
    %     end
    
    if ((err_best-control_errors(i))/control_errors(i)>err_eps)||...
            (err_best-control_errors(i)>0 && reg_best>=10^alpha_Cs(i))
        Abest = A;
        Bbest = B;
        Cbest = C;
        Abestsliced = A_sliced;
        Bbestsliced = B_sliced;
        Cbestcontrol = C_control;
        reg_best = 10^alpha_Cs(i);
        err_best = control_errors(i);
        %fprintf('1e%d: %f; %f\t%f\t%f\n', alpha_Cs(i), err_best, max(A_sliced{2}), max(B_sliced{2}), max(C(2,:)));
        fprintf('1e%d: %f; %f\t%f\t%f\n', alpha_Cs(i), err_best, max(A_sliced{1}), max(B_sliced{1}), max(C(1,:)));
    end
    
    if i>1
        if (control_errors(i)-control_errors(i-1))/control_errors(i-1)>err_eps
            goup = ~goup;
        end
        if ~goup && ((abs(control_errors(i)-control_errors(1))/control_errors(1)<err_eps)||alpha_Cs(i)<1e-20)
            goup = true;
        end
        if goup
            prevUps = alpha_Cs(alpha_Cs>alpha_Cs(i));
            if isempty(prevUps)
                alpha_Cs(i+1) = alpha_Cs(i) + bigstep;
            else
                if (min(prevUps)==alpha_Cs(i)+1)
                    ind = find(alpha_Cs == min(prevUps));
                    if (control_errors(ind)-control_errors(i))/control_errors(ind)>err_eps%(alpha_Cs(ind-1)<alpha_Cs(ind))
                        goon = false;
                    else
                        candidates = setdiff(alpha_Cs(i)+1:max(alpha_Cs(2:end)), prevUps);
                        if isempty(candidates)
                            goon = false;
                        else
                            alpha_Cs(i+1) = min(candidates);
                        end
                    end
                else
                    alpha_Cs(i+1) = ceil((alpha_Cs(i)+min(prevUps))/2);
                end
            end
        else
            %              if alpha_Cs(i)<1e-20
            %                  goon = false;
            %              else
            prevDowns = alpha_Cs(alpha_Cs<alpha_Cs(i));
            prevDowns = prevDowns(~isinf(prevDowns));
            if isempty(prevDowns)
                alpha_Cs(i+1) = alpha_Cs(i) - bigstep;
            else
                if (max(prevDowns)==alpha_Cs(i)-1)
                    ind = find(alpha_Cs == max(prevDowns));
                    if (control_errors(ind)-control_errors(i))/control_errors(ind)>err_eps%(alpha_Cs(ind-1)>alpha_Cs(ind))
                        goon = false;
                    else
                        candidates = setdiff(min(alpha_Cs(2:end)):alpha_Cs(i)-1, prevDowns);
                        if isempty(candidates)
                            goon = false;
                        else
                            alpha_Cs(i+1) = max(candidates);
                        end
                    end
                else
                    alpha_Cs(i+1) = floor((alpha_Cs(i)+max(prevDowns))/2);
                end
            end
            %end
        end
    end
    i=i+1;
end
