function [A B C_long isConverged] = nonlinear_alpha_beta_LO(inten, alpha, beta, maxIterCnt, eps, use_term_criteria)
arraysCnt = size(inten,2);
maxLOIter = 6;

W = ones(size(inten));
isConverged = 0;
C_long = zeros(1,arraysCnt);

%tic;
for LOIter=1:maxLOIter
    %fprintf('LO iteration %d; ', LOIter);
    arrays_omit = find(mean(W)<0.5);
    % fprintf('%d arrays omitted completely; ', length(arrays_omit));
    arrays_keep = setdiff(1:arraysCnt, arrays_omit);
    W(:,arrays_omit) = 0;
    
    probes_omit = find(mean(W,2)<0.05);
    probes_keep = setdiff(1:size(inten,1), probes_omit);
    W(probes_omit,:) = 0;
    
    if sum(sum( W(:,arrays_keep),2)==0)>0
        fprintf('EMERGENCY: probe completely omitted\n');        
    end
    
    I = inten(:,arrays_keep);
%    W = W(:,arrays_keep);
    
    [A B C isConverged] = nonlinear_alpha_beta_weighted(I, W(:,arrays_keep), alpha, beta, maxIterCnt, eps, 0, 0, use_term_criteria);
    
    C_long(arrays_keep) = C;
    
    if length(arrays_omit)>1
        C_long(arrays_omit) = nonlinear_alpha_beta_fixedAB(inten(:,arrays_omit), A, B, alpha, beta, maxIterCnt, eps, 0, use_term_criteria);
    end
     
    error = (langmuir_func(A,B,C)-I) ./ I .* repmat(C,size(I,1),1);
    bound = quantile(error(W(:,arrays_keep)==1),0.95);
    W(:,arrays_keep) = W(:,arrays_keep).*(error<=bound);
    
    % fprintf('%d iterations, %f sec; ', step,time);
end
%fprintf('probeset %d: %d arrays omitted completely\n', probeset_idx, length(arrays_omit));
%toc;
%nln_plot_probeset(I,A,B,C,0)
%suplabel([num2str(sum(sum(W_sliced{probeset_idx}))/numel(W_sliced{probeset_idx})*100), '% probes left, ', num2str(length(arrays_omit)/arraysCnt*100), '% arrays excluded completely'], 't');
%set(gcf, 'Position', [0 0 1900 1000]);
%     saveas(gcf, ['nln_plot_probeset/probeset_' int2str(probeset_idx) '_alpha=' int2str(alpha) '_beta=' int2str(beta) '.png'], 'png');
%     saveas(gcf, ['nln_plot_probeset/probeset_' int2str(probeset_idx) '_alpha=' int2str(alpha) '_beta=' int2str(beta) '.fig'], 'fig');
